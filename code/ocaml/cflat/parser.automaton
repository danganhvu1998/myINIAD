State 0:
prog' -> . prog [ # ]
-- On INT shift to state 1
-- On EXTERN shift to state 2
-- On CHAR shift to state 3
-- On typ shift to state 15
-- On prog shift to state 84
-- On list(decl) shift to state 85
-- On decl shift to state 87
-- On EOF reduce production list(decl) -> 

State 1:
typ -> INT . [ RPAREN IDENT COMMA ]
-- On RPAREN reduce production typ -> INT 
-- On IDENT reduce production typ -> INT 
-- On COMMA reduce production typ -> INT 

State 2:
decl -> EXTERN . typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON [ INT EXTERN EOF CHAR ]
-- On INT shift to state 1
-- On CHAR shift to state 3
-- On typ shift to state 5

State 3:
typ -> CHAR . ASTERISK [ RPAREN IDENT COMMA ]
-- On ASTERISK shift to state 4

State 4:
typ -> CHAR ASTERISK . [ RPAREN IDENT COMMA ]
-- On RPAREN reduce production typ -> CHAR ASTERISK 
-- On IDENT reduce production typ -> CHAR ASTERISK 
-- On COMMA reduce production typ -> CHAR ASTERISK 

State 5:
decl -> EXTERN typ . IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON [ INT EXTERN EOF CHAR ]
-- On IDENT shift to state 6

State 6:
decl -> EXTERN typ IDENT . LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON [ INT EXTERN EOF CHAR ]
-- On LPAREN shift to state 7

State 7:
decl -> EXTERN typ IDENT LPAREN . loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON [ INT EXTERN EOF CHAR ]
-- On INT shift to state 1
-- On CHAR shift to state 3
-- On typ shift to state 8
-- On separated_nonempty_list(COMMA,typ) shift to state 11
-- On loption(separated_nonempty_list(COMMA,typ)) shift to state 12
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,typ)) -> 

State 8:
separated_nonempty_list(COMMA,typ) -> typ . [ RPAREN ]
separated_nonempty_list(COMMA,typ) -> typ . COMMA separated_nonempty_list(COMMA,typ) [ RPAREN ]
-- On COMMA shift to state 9
-- On RPAREN reduce production separated_nonempty_list(COMMA,typ) -> typ 

State 9:
separated_nonempty_list(COMMA,typ) -> typ COMMA . separated_nonempty_list(COMMA,typ) [ RPAREN ]
-- On INT shift to state 1
-- On CHAR shift to state 3
-- On typ shift to state 8
-- On separated_nonempty_list(COMMA,typ) shift to state 10

State 10:
separated_nonempty_list(COMMA,typ) -> typ COMMA separated_nonempty_list(COMMA,typ) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,typ) -> typ COMMA separated_nonempty_list(COMMA,typ) 

State 11:
loption(separated_nonempty_list(COMMA,typ)) -> separated_nonempty_list(COMMA,typ) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,typ)) -> separated_nonempty_list(COMMA,typ) 

State 12:
decl -> EXTERN typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) . RPAREN SEMICOLON [ INT EXTERN EOF CHAR ]
-- On RPAREN shift to state 13

State 13:
decl -> EXTERN typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN . SEMICOLON [ INT EXTERN EOF CHAR ]
-- On SEMICOLON shift to state 14

State 14:
decl -> EXTERN typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON . [ INT EXTERN EOF CHAR ]
-- On INT reduce production decl -> EXTERN typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON 
-- On EXTERN reduce production decl -> EXTERN typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON 
-- On EOF reduce production decl -> EXTERN typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON 
-- On CHAR reduce production decl -> EXTERN typ IDENT LPAREN loption(separated_nonempty_list(COMMA,typ)) RPAREN SEMICOLON 

State 15:
decl -> typ . IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC [ INT EXTERN EOF CHAR ]
-- On IDENT shift to state 16

State 16:
decl -> typ IDENT . LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC [ INT EXTERN EOF CHAR ]
-- On LPAREN shift to state 17

State 17:
decl -> typ IDENT LPAREN . loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC [ INT EXTERN EOF CHAR ]
-- On INT shift to state 1
-- On CHAR shift to state 3
-- On vardecl shift to state 18
-- On typ shift to state 20
-- On separated_nonempty_list(COMMA,vardecl) shift to state 23
-- On loption(separated_nonempty_list(COMMA,vardecl)) shift to state 24
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,vardecl)) -> 

State 18:
separated_nonempty_list(COMMA,vardecl) -> vardecl . [ RPAREN ]
separated_nonempty_list(COMMA,vardecl) -> vardecl . COMMA separated_nonempty_list(COMMA,vardecl) [ RPAREN ]
-- On COMMA shift to state 19
-- On RPAREN reduce production separated_nonempty_list(COMMA,vardecl) -> vardecl 

State 19:
separated_nonempty_list(COMMA,vardecl) -> vardecl COMMA . separated_nonempty_list(COMMA,vardecl) [ RPAREN ]
-- On INT shift to state 1
-- On CHAR shift to state 3
-- On vardecl shift to state 18
-- On typ shift to state 20
-- On separated_nonempty_list(COMMA,vardecl) shift to state 22

State 20:
vardecl -> typ . IDENT [ SEMICOLON RPAREN COMMA ]
-- On IDENT shift to state 21

State 21:
vardecl -> typ IDENT . [ SEMICOLON RPAREN COMMA ]
-- On SEMICOLON reduce production vardecl -> typ IDENT 
-- On RPAREN reduce production vardecl -> typ IDENT 
-- On COMMA reduce production vardecl -> typ IDENT 

State 22:
separated_nonempty_list(COMMA,vardecl) -> vardecl COMMA separated_nonempty_list(COMMA,vardecl) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,vardecl) -> vardecl COMMA separated_nonempty_list(COMMA,vardecl) 

State 23:
loption(separated_nonempty_list(COMMA,vardecl)) -> separated_nonempty_list(COMMA,vardecl) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,vardecl)) -> separated_nonempty_list(COMMA,vardecl) 

State 24:
decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) . RPAREN LCBRAC body RCBRAC [ INT EXTERN EOF CHAR ]
-- On RPAREN shift to state 25

State 25:
decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN . LCBRAC body RCBRAC [ INT EXTERN EOF CHAR ]
-- On LCBRAC shift to state 26

State 26:
decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC . body RCBRAC [ INT EXTERN EOF CHAR ]
-- On INT shift to state 1
-- On CHAR shift to state 3
-- On vardecl shift to state 27
-- On typ shift to state 20
-- On list(terminated(vardecl,SEMICOLON)) shift to state 30
-- On body shift to state 82
-- On WHILE reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On STRVAL reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On RETURN reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On RCBRAC reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On LPAREN reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On INTVAL reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On IF reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On IDENT reduce production list(terminated(vardecl,SEMICOLON)) -> 

State 27:
list(terminated(vardecl,SEMICOLON)) -> vardecl . SEMICOLON list(terminated(vardecl,SEMICOLON)) [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ]
-- On SEMICOLON shift to state 28

State 28:
list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON . list(terminated(vardecl,SEMICOLON)) [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ]
-- On INT shift to state 1
-- On CHAR shift to state 3
-- On vardecl shift to state 27
-- On typ shift to state 20
-- On list(terminated(vardecl,SEMICOLON)) shift to state 29
-- On WHILE reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On STRVAL reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On RETURN reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On RCBRAC reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On LPAREN reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On INTVAL reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On IF reduce production list(terminated(vardecl,SEMICOLON)) -> 
-- On IDENT reduce production list(terminated(vardecl,SEMICOLON)) -> 

State 29:
list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ]
-- On WHILE reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 
-- On STRVAL reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 
-- On RETURN reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 
-- On RCBRAC reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 
-- On LPAREN reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 
-- On INTVAL reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 
-- On IF reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 
-- On IDENT reduce production list(terminated(vardecl,SEMICOLON)) -> vardecl SEMICOLON list(terminated(vardecl,SEMICOLON)) 

State 30:
body -> list(terminated(vardecl,SEMICOLON)) . list(stmt) [ RCBRAC ]
-- On WHILE shift to state 31
-- On STRVAL shift to state 33
-- On RETURN shift to state 58
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IF shift to state 62
-- On IDENT shift to state 66
-- On stmt shift to state 76
-- On list(stmt) shift to state 81
-- On expr shift to state 71
-- On RCBRAC reduce production list(stmt) -> 

State 31:
stmt -> WHILE . LPAREN expr RPAREN block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On LPAREN shift to state 32

State 32:
stmt -> WHILE LPAREN . expr RPAREN block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 56

State 33:
expr -> STRVAL . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On SEMICOLON reduce production expr -> STRVAL 
-- On RPAREN reduce production expr -> STRVAL 
-- On PLUS reduce production expr -> STRVAL 
-- On NOTEQUAL reduce production expr -> STRVAL 
-- On MINUS reduce production expr -> STRVAL 
-- On EQUAL reduce production expr -> STRVAL 
-- On COMMA reduce production expr -> STRVAL 
-- On ASTERISK reduce production expr -> STRVAL 

State 34:
expr -> LPAREN . expr RPAREN [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 54

State 35:
expr -> INTVAL . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On SEMICOLON reduce production expr -> INTVAL 
-- On RPAREN reduce production expr -> INTVAL 
-- On PLUS reduce production expr -> INTVAL 
-- On NOTEQUAL reduce production expr -> INTVAL 
-- On MINUS reduce production expr -> INTVAL 
-- On EQUAL reduce production expr -> INTVAL 
-- On COMMA reduce production expr -> INTVAL 
-- On ASTERISK reduce production expr -> INTVAL 

State 36:
expr -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> IDENT . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On LPAREN shift to state 37
-- On SEMICOLON reduce production expr -> IDENT 
-- On RPAREN reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On NOTEQUAL reduce production expr -> IDENT 
-- On MINUS reduce production expr -> IDENT 
-- On EQUAL reduce production expr -> IDENT 
-- On COMMA reduce production expr -> IDENT 
-- On ASTERISK reduce production expr -> IDENT 

State 37:
expr -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On separated_nonempty_list(COMMA,expr) shift to state 38
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 39
-- On expr shift to state 41
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 38:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 

State 39:
expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On RPAREN shift to state 40

State 40:
expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On SEMICOLON reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 
-- On RPAREN reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 
-- On PLUS reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 
-- On NOTEQUAL reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 
-- On MINUS reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 
-- On EQUAL reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 
-- On COMMA reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 
-- On ASTERISK reduce production expr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN 

State 41:
expr -> expr . PLUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . MINUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . ASTERISK expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . EQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . NOTEQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
-- On PLUS shift to state 42
-- On NOTEQUAL shift to state 46
-- On MINUS shift to state 48
-- On EQUAL shift to state 50
-- On COMMA shift to state 52
-- On ASTERISK shift to state 44
-- On RPAREN reduce production separated_nonempty_list(COMMA,expr) -> expr 

State 42:
expr -> expr PLUS . expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 43

State 43:
expr -> expr . PLUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr PLUS expr . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On ASTERISK shift to state 44
-- On SEMICOLON reduce production expr -> expr PLUS expr 
-- On RPAREN reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On NOTEQUAL reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On EQUAL reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 

State 44:
expr -> expr ASTERISK . expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 45

State 45:
expr -> expr . PLUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr ASTERISK expr . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On SEMICOLON reduce production expr -> expr ASTERISK expr 
-- On RPAREN reduce production expr -> expr ASTERISK expr 
-- On PLUS reduce production expr -> expr ASTERISK expr 
-- On NOTEQUAL reduce production expr -> expr ASTERISK expr 
-- On MINUS reduce production expr -> expr ASTERISK expr 
-- On EQUAL reduce production expr -> expr ASTERISK expr 
-- On COMMA reduce production expr -> expr ASTERISK expr 
-- On ASTERISK reduce production expr -> expr ASTERISK expr 

State 46:
expr -> expr NOTEQUAL . expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 47

State 47:
expr -> expr . PLUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr NOTEQUAL expr . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On PLUS shift to state 42
-- On MINUS shift to state 48
-- On ASTERISK shift to state 44
-- On SEMICOLON reduce production expr -> expr NOTEQUAL expr 
-- On RPAREN reduce production expr -> expr NOTEQUAL expr 
-- On NOTEQUAL reduce production expr -> expr NOTEQUAL expr 
-- On EQUAL reduce production expr -> expr NOTEQUAL expr 
-- On COMMA reduce production expr -> expr NOTEQUAL expr 

State 48:
expr -> expr MINUS . expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 49

State 49:
expr -> expr . PLUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr MINUS expr . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On ASTERISK shift to state 44
-- On SEMICOLON reduce production expr -> expr MINUS expr 
-- On RPAREN reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On NOTEQUAL reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On EQUAL reduce production expr -> expr MINUS expr 
-- On COMMA reduce production expr -> expr MINUS expr 

State 50:
expr -> expr EQUAL . expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 51

State 51:
expr -> expr . PLUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr EQUAL expr . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On PLUS shift to state 42
-- On MINUS shift to state 48
-- On ASTERISK shift to state 44
-- On SEMICOLON reduce production expr -> expr EQUAL expr 
-- On RPAREN reduce production expr -> expr EQUAL expr 
-- On NOTEQUAL reduce production expr -> expr EQUAL expr 
-- On EQUAL reduce production expr -> expr EQUAL expr 
-- On COMMA reduce production expr -> expr EQUAL expr 

State 52:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On separated_nonempty_list(COMMA,expr) shift to state 53
-- On expr shift to state 41

State 53:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 

State 54:
expr -> expr . PLUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . MINUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . ASTERISK expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . EQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . NOTEQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> LPAREN expr . RPAREN [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On RPAREN shift to state 55
-- On PLUS shift to state 42
-- On NOTEQUAL shift to state 46
-- On MINUS shift to state 48
-- On EQUAL shift to state 50
-- On ASTERISK shift to state 44

State 55:
expr -> LPAREN expr RPAREN . [ SEMICOLON RPAREN PLUS NOTEQUAL MINUS EQUAL COMMA ASTERISK ]
-- On SEMICOLON reduce production expr -> LPAREN expr RPAREN 
-- On RPAREN reduce production expr -> LPAREN expr RPAREN 
-- On PLUS reduce production expr -> LPAREN expr RPAREN 
-- On NOTEQUAL reduce production expr -> LPAREN expr RPAREN 
-- On MINUS reduce production expr -> LPAREN expr RPAREN 
-- On EQUAL reduce production expr -> LPAREN expr RPAREN 
-- On COMMA reduce production expr -> LPAREN expr RPAREN 
-- On ASTERISK reduce production expr -> LPAREN expr RPAREN 

State 56:
expr -> expr . PLUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . MINUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . ASTERISK expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . EQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . NOTEQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
stmt -> WHILE LPAREN expr . RPAREN block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On RPAREN shift to state 57
-- On PLUS shift to state 42
-- On NOTEQUAL shift to state 46
-- On MINUS shift to state 48
-- On EQUAL shift to state 50
-- On ASTERISK shift to state 44

State 57:
stmt -> WHILE LPAREN expr RPAREN . block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE shift to state 31
-- On STRVAL shift to state 33
-- On RETURN shift to state 58
-- On LPAREN shift to state 34
-- On LCBRAC shift to state 61
-- On INTVAL shift to state 35
-- On IF shift to state 62
-- On IDENT shift to state 66
-- On stmt shift to state 70
-- On expr shift to state 71
-- On block shift to state 80

State 58:
stmt -> RETURN . expr SEMICOLON [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 59

State 59:
expr -> expr . PLUS expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
stmt -> RETURN expr . SEMICOLON [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On SEMICOLON shift to state 60
-- On PLUS shift to state 42
-- On NOTEQUAL shift to state 46
-- On MINUS shift to state 48
-- On EQUAL shift to state 50
-- On ASTERISK shift to state 44

State 60:
stmt -> RETURN expr SEMICOLON . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE reduce production stmt -> RETURN expr SEMICOLON 
-- On STRVAL reduce production stmt -> RETURN expr SEMICOLON 
-- On RETURN reduce production stmt -> RETURN expr SEMICOLON 
-- On RCBRAC reduce production stmt -> RETURN expr SEMICOLON 
-- On LPAREN reduce production stmt -> RETURN expr SEMICOLON 
-- On INTVAL reduce production stmt -> RETURN expr SEMICOLON 
-- On IF reduce production stmt -> RETURN expr SEMICOLON 
-- On IDENT reduce production stmt -> RETURN expr SEMICOLON 
-- On ELSE reduce production stmt -> RETURN expr SEMICOLON 

State 61:
block -> LCBRAC . list(stmt) RCBRAC [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE shift to state 31
-- On STRVAL shift to state 33
-- On RETURN shift to state 58
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IF shift to state 62
-- On IDENT shift to state 66
-- On stmt shift to state 76
-- On list(stmt) shift to state 78
-- On expr shift to state 71
-- On RCBRAC reduce production list(stmt) -> 

State 62:
stmt -> IF . LPAREN expr RPAREN block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
stmt -> IF . LPAREN expr RPAREN block ELSE block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On LPAREN shift to state 63

State 63:
stmt -> IF LPAREN . expr RPAREN block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
stmt -> IF LPAREN . expr RPAREN block ELSE block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 64

State 64:
expr -> expr . PLUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . MINUS expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . ASTERISK expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . EQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . NOTEQUAL expr [ RPAREN PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
stmt -> IF LPAREN expr . RPAREN block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
stmt -> IF LPAREN expr . RPAREN block ELSE block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On RPAREN shift to state 65
-- On PLUS shift to state 42
-- On NOTEQUAL shift to state 46
-- On MINUS shift to state 48
-- On EQUAL shift to state 50
-- On ASTERISK shift to state 44

State 65:
stmt -> IF LPAREN expr RPAREN . block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
stmt -> IF LPAREN expr RPAREN . block ELSE block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE shift to state 31
-- On STRVAL shift to state 33
-- On RETURN shift to state 58
-- On LPAREN shift to state 34
-- On LCBRAC shift to state 61
-- On INTVAL shift to state 35
-- On IF shift to state 62
-- On IDENT shift to state 66
-- On stmt shift to state 70
-- On expr shift to state 71
-- On block shift to state 73

State 66:
expr -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> IDENT . [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
stmt -> IDENT . ASSIGN expr SEMICOLON [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On LPAREN shift to state 37
-- On ASSIGN shift to state 67
-- On SEMICOLON reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On NOTEQUAL reduce production expr -> IDENT 
-- On MINUS reduce production expr -> IDENT 
-- On EQUAL reduce production expr -> IDENT 
-- On ASTERISK reduce production expr -> IDENT 

State 67:
stmt -> IDENT ASSIGN . expr SEMICOLON [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On STRVAL shift to state 33
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IDENT shift to state 36
-- On expr shift to state 68

State 68:
expr -> expr . PLUS expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
stmt -> IDENT ASSIGN expr . SEMICOLON [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On SEMICOLON shift to state 69
-- On PLUS shift to state 42
-- On NOTEQUAL shift to state 46
-- On MINUS shift to state 48
-- On EQUAL shift to state 50
-- On ASTERISK shift to state 44

State 69:
stmt -> IDENT ASSIGN expr SEMICOLON . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On STRVAL reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On RETURN reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On RCBRAC reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On LPAREN reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On INTVAL reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On IF reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On IDENT reduce production stmt -> IDENT ASSIGN expr SEMICOLON 
-- On ELSE reduce production stmt -> IDENT ASSIGN expr SEMICOLON 

State 70:
block -> stmt . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE reduce production block -> stmt 
-- On STRVAL reduce production block -> stmt 
-- On RETURN reduce production block -> stmt 
-- On RCBRAC reduce production block -> stmt 
-- On LPAREN reduce production block -> stmt 
-- On INTVAL reduce production block -> stmt 
-- On IF reduce production block -> stmt 
-- On IDENT reduce production block -> stmt 
-- On ELSE reduce production block -> stmt 

State 71:
expr -> expr . PLUS expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . MINUS expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . ASTERISK expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . EQUAL expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
expr -> expr . NOTEQUAL expr [ SEMICOLON PLUS NOTEQUAL MINUS EQUAL ASTERISK ]
stmt -> expr . SEMICOLON [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On SEMICOLON shift to state 72
-- On PLUS shift to state 42
-- On NOTEQUAL shift to state 46
-- On MINUS shift to state 48
-- On EQUAL shift to state 50
-- On ASTERISK shift to state 44

State 72:
stmt -> expr SEMICOLON . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE reduce production stmt -> expr SEMICOLON 
-- On STRVAL reduce production stmt -> expr SEMICOLON 
-- On RETURN reduce production stmt -> expr SEMICOLON 
-- On RCBRAC reduce production stmt -> expr SEMICOLON 
-- On LPAREN reduce production stmt -> expr SEMICOLON 
-- On INTVAL reduce production stmt -> expr SEMICOLON 
-- On IF reduce production stmt -> expr SEMICOLON 
-- On IDENT reduce production stmt -> expr SEMICOLON 
-- On ELSE reduce production stmt -> expr SEMICOLON 

State 73:
stmt -> IF LPAREN expr RPAREN block . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
stmt -> IF LPAREN expr RPAREN block . ELSE block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On ELSE shift to state 74
-- On WHILE reduce production stmt -> IF LPAREN expr RPAREN block 
-- On STRVAL reduce production stmt -> IF LPAREN expr RPAREN block 
-- On RETURN reduce production stmt -> IF LPAREN expr RPAREN block 
-- On RCBRAC reduce production stmt -> IF LPAREN expr RPAREN block 
-- On LPAREN reduce production stmt -> IF LPAREN expr RPAREN block 
-- On INTVAL reduce production stmt -> IF LPAREN expr RPAREN block 
-- On IF reduce production stmt -> IF LPAREN expr RPAREN block 
-- On IDENT reduce production stmt -> IF LPAREN expr RPAREN block 
-- On ELSE reduce production stmt -> IF LPAREN expr RPAREN block 
** Conflict on ELSE

State 74:
stmt -> IF LPAREN expr RPAREN block ELSE . block [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE shift to state 31
-- On STRVAL shift to state 33
-- On RETURN shift to state 58
-- On LPAREN shift to state 34
-- On LCBRAC shift to state 61
-- On INTVAL shift to state 35
-- On IF shift to state 62
-- On IDENT shift to state 66
-- On stmt shift to state 70
-- On expr shift to state 71
-- On block shift to state 75

State 75:
stmt -> IF LPAREN expr RPAREN block ELSE block . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On STRVAL reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On RETURN reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On RCBRAC reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On LPAREN reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On INTVAL reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On IF reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On IDENT reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 
-- On ELSE reduce production stmt -> IF LPAREN expr RPAREN block ELSE block 

State 76:
list(stmt) -> stmt . list(stmt) [ RCBRAC ]
-- On WHILE shift to state 31
-- On STRVAL shift to state 33
-- On RETURN shift to state 58
-- On LPAREN shift to state 34
-- On INTVAL shift to state 35
-- On IF shift to state 62
-- On IDENT shift to state 66
-- On stmt shift to state 76
-- On list(stmt) shift to state 77
-- On expr shift to state 71
-- On RCBRAC reduce production list(stmt) -> 

State 77:
list(stmt) -> stmt list(stmt) . [ RCBRAC ]
-- On RCBRAC reduce production list(stmt) -> stmt list(stmt) 

State 78:
block -> LCBRAC list(stmt) . RCBRAC [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On RCBRAC shift to state 79

State 79:
block -> LCBRAC list(stmt) RCBRAC . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On STRVAL reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On RETURN reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On RCBRAC reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On LPAREN reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On INTVAL reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On IF reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On IDENT reduce production block -> LCBRAC list(stmt) RCBRAC 
-- On ELSE reduce production block -> LCBRAC list(stmt) RCBRAC 

State 80:
stmt -> WHILE LPAREN expr RPAREN block . [ WHILE STRVAL RETURN RCBRAC LPAREN INTVAL IF IDENT ELSE ]
-- On WHILE reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On STRVAL reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On RETURN reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On RCBRAC reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On LPAREN reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On INTVAL reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On IF reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On IDENT reduce production stmt -> WHILE LPAREN expr RPAREN block 
-- On ELSE reduce production stmt -> WHILE LPAREN expr RPAREN block 

State 81:
body -> list(terminated(vardecl,SEMICOLON)) list(stmt) . [ RCBRAC ]
-- On RCBRAC reduce production body -> list(terminated(vardecl,SEMICOLON)) list(stmt) 

State 82:
decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body . RCBRAC [ INT EXTERN EOF CHAR ]
-- On RCBRAC shift to state 83

State 83:
decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC . [ INT EXTERN EOF CHAR ]
-- On INT reduce production decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC 
-- On EXTERN reduce production decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC 
-- On EOF reduce production decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC 
-- On CHAR reduce production decl -> typ IDENT LPAREN loption(separated_nonempty_list(COMMA,vardecl)) RPAREN LCBRAC body RCBRAC 

State 84:
prog' -> prog . [ # ]
-- On # accept prog

State 85:
prog -> list(decl) . EOF [ # ]
-- On EOF shift to state 86

State 86:
prog -> list(decl) EOF . [ # ]
-- On # reduce production prog -> list(decl) EOF 

State 87:
list(decl) -> decl . list(decl) [ EOF ]
-- On INT shift to state 1
-- On EXTERN shift to state 2
-- On CHAR shift to state 3
-- On typ shift to state 15
-- On list(decl) shift to state 88
-- On decl shift to state 87
-- On EOF reduce production list(decl) -> 

State 88:
list(decl) -> decl list(decl) . [ EOF ]
-- On EOF reduce production list(decl) -> decl list(decl) 

