Hash is the algorithm that ship element from a group A to group B. Size of group B can be smaller or bigger than A depend on the purpose(Normally smaller, if bigger normally called pseudo-random mostly apply in security). Hash is normally one-way hash that gives an element of A can easily calculate the corresponding element in B but cannot reverse an element from B to corresponding one in A.

The most basic idea of hash a string to a number:
base = fixed int
m = another fixed int
hash(string) = ( string[0]*base^0+string[1]*base^1+...+string[n]*base^n ) mod m
#'A' = 65, 'B'=66, 'C'=67 and so on. https://www.asciitable.com/

For example, if m = 10^9 so every string is hashed into a number from 0->10^9-1. If hash of two string are equal, they MIGHT equal (the chance that they are different is very small and acceptable), and if two strings' hash are different, they are 100% not equal. 
For the hash function of python, m is about few billions :D

<---------------------------------------------------------------------------------------->

The hash function of python still too big with a list. A list contains 10^6 int need about 4Mb of ram to store (C++ standard, python use a different type of int so impossible to tell how much ram 10^6 int need in python but much more than 4Mb) 
Mask: So few billions int still need too much Ram and spend GB of ram to store just a few names of fruit is super wasteful. So we need some how to HASH a big number about few billions to a number <10 000. So the second HASH is 

hash(big_int) = big_int & mask    #super easy hash#
#https://en.wikipedia.org/wiki/Bitwise_operation

"AND" operator property:
if C = A & B then C<=A and C<=B

**Mask is not a hash function, it is just a number that used in a hash function

<--------------------------------------------------------------------------------->
----------------------------------eli5 explanation---------------------------------
<--------------------------------------------------------------------------------->
###first hash: hash a string to a big_int

base = fixed int
m = another fixed int
hash(string) = ( string[0]*base^0+string[1]*base^1+...+string[n]*base^n ) mod m
#'A' = 65, 'B'=66, 'C'=67 and so on. https://www.asciitable.com/

###second hash: hash a big_int to an int<10000 to be able to put in a list
hash(big_int) = big_int & mask    #super easy hash#
